!function(e,s,t){"use strict";s.module("s3",["ngResource","ui.router","ActivitiRest"]).provider("s3Config",[function(){this.apiBaseUrl="http://localhost:3000/activiti/",this.setApiBaseUrl=function(e){this.apiBaseUrl=e},this.getApiBaseUrl=function(){return this.apiBaseUrl},this.webBaseUrl=e.location.host,this.setWebBaseUrl=function(e){this.webBaseUrl=e},this.getWebBaseUrl=function(){return this.webBaseUrl},this.projectId="00001",this.setProjectId=function(e){this.projectId=e},this.getProjectId=function(){return this.projectId},this.storageService=e.localStorage,this.setStorageService=function(e){this.storageService=e},this.getStorageService=function(){return this.storageService},this.baseRoute="",this.resolveRoute=function(e){return e},this.accessToken="",this.getAccessToken=function(){return this.accessToken},this.setAccessToken=function(e){this.accessToken=e};var s=this;this.$get=function(){return s}}]).run(["$rootScope","s3BpmService","s3Config",function(e,s,t){e.$on("$stateChangeStart",function(r,a,o,i,n){!o.processInstanceId||e.response&&e.response.processInstanceId===o.processInstanceId&&t.resolveRoute(e.response.pageName).name===a.name||(r.preventDefault(),s._defaultSuccess(o.processInstanceId,null))})}]).factory("s3BpmService",["$q","$http","$window","$state","$location","s3Config","$rootScope","$interval","ProcessInstanceService","TaskService",function(e,s,t,r,a,o,i,n,c,l){return{jsonToVariables:function(e){var s=[];for(var t in e)s.push({name:t,value:e[t]});return s},_defaultSuccess:function(s,a){console.log(">>> in default success and response:",a);var c=this,u=e.defer();if(s){var d={access_token:o.getAccessToken(),includeTaskLocalVariables:!0,processInstanceId:s};l.get(d,function(e){if(console.log("SUCCESS TaskService.get in _defaultSuccess, response:",JSON.stringify(e)),e&&e.size>0){var a=e.data[0];if(i.response=e.data[0],a.variables&&a.variables.length>0)if(a.variables.forEach(function(e){"widgetInput"===e.name?a.widgetInput=e.value?JSON.parse(e.value):{}:"pageName"===e.name?a.pageName=e.value?e.value:"":"redirectUrl"===e.name&&(a.redirectUrl=e.value?e.value:"")}),"common_widget_html"==a.widgetInput.type)if(a.pageName){console.log("widgetInput.type is common_widget_html, pageName is",a.pageName);var o={processInstanceId:s};r.go(a.pageName,o,{reload:!0})}else console.log("widgetInput.type is common_widget_html, but no pageName..."),u.resolve(a);else if("common_widget_redirect"==a.widgetInput.type)if(a.redirectUrl){console.log("widgetInput.type is common_widget_redirect, redirect to",a.redirectUrl);var l=t.open(a.redirectUrl,"_blank","height=568,width=375,menubar=0"),d=n(function(){return l.closed?(n.cancel(d),console.log(">>> _defaultSuccess common_widget_redirect detect child window closed!"),void c.S3BpmExecute(s,a.id,{},null,null)):void 0},1e3)}else console.log("widgetInput.type is common_widget_redirect but no redirectUrl..."),u.resolve(a);else{console.log("widgetInput.type is common_widget_jsonschema");var o={processInstanceId:s};r.go(a.pageName,o,{reload:!1})}else u.resolve([])}else console.log("No task for you, "),u.resolve([])},function(e){console.log("No task for you, "),u.resolve([])})}else console.error("No processInstanceId in _defaultSuccess..."),u.resolve("No processInstanceId in _defaultSuccess...");return u.promise},S3BpmCreate:function(e,s,t,r,a){var i=this,n=this.jsonToVariables(s),l={processDefinitionKey:e,variables:n},u={};a&&(u.access_token=o.getAccessToken()),c.save(u,l,function(e){console.log("SUCCESS ProcessInstanceService.create",JSON.stringify(e));var s=e.id;t?t(e).then(function(t){t?i._defaultSuccess(s,e).then(function(e){console.log("Execute self._defaultSuccess complete.")}):console.log("User success handler return value false. _defaultSuccess complete.")},function(e){console.error("Failed to execute self._defaultSuccess.")}):i._defaultSuccess(s,e)},function(e){var t="";switch(e.status){case 0:t="API SERVER is Not reachable!";break;default:t=e.description?e.description:"UNKNOW (from Activiti)"}console.error("ERROR ProcessInstanceService.create","bpmParameters >> ",s,"data >> ",l),console.error("s3-activiti-middle description >> ",t,"error response >> ",e),r&&r(e)})},S3BpmQuery:function(e,s,t){},S3BpmQueryTasks:function(e,s,t,r){var a=this;l.query(e,s,function(e){console.log("SUCCESS S3BpmQueryTasks TaskService.query ",e),e.data.forEach(function(e){for(var s=-1,t=0;t<e.variables.length;t++)"widgetInput"===e.variables[t].name&&(s=t);s>-1?e.widgetInput=JSON.parse(e.variables[s].value||"{}"):e.widgetInput={};for(var r=-1,a=0;a<e.variables.length;a++)"pageName"===e.variables[a].name&&(r=a);r>-1?e.pageName=e.variables[r].value||"{}":e.pageName={},delete e.variables}),t?t(e):a._defaultSuccess(e)},function(t){console.error("ERROR S3BpmQueryTasks queryParameter >> ",e," queryData >>> ",s),r&&r(t)})},S3BpmExecute:function(e,s,t,r,a){var e=e,i=this,n=[];t.variables&&(n=this.jsonToVariables(t.variables));var c;c=t.variables?{action:"complete",variables:n}:{action:"complete",variables:[]};var u={id:s,access_token:o.getAccessToken()};l.execute(u,c,function(s){console.log("SUCCESS S3BpmExecute TaskService.post",JSON.stringify(s)),r?r(s).then(function(t){t?i._defaultSuccess(e,s).then(function(e){console.log("Execute self._defaultSuccess complete.")}):console.log("User success handler return value false. _defaultSuccess complete.")},function(e){console.error("Failed to execute self._defaultSuccess.",e)}):i._defaultSuccess(e,s)},function(e){var r="";switch(e.status){case 0:r="API SERVER is Not reachable!";break;default:r=e.description?e.description:"UNKNOW (from Activiti)"}console.error("ERROR S3BpmExecute TaskService execute taskId >> ",s,"bpmParameters >> ",t,"data >> ",c),console.error("s3-activiti-middle description >> ",r,"error response >> ",e),a&&a(e)})},S3BpmGetTaskListByUser:function(s){s||(s={}),s.access_token=o.getAccessToken(),s.includeTaskLocalVariables=!0;var t=e.defer();return l.get(s,function(e){e&&e.size>0?(e.data.forEach(function(e){for(var s=-1,t=0;t<e.variables.length;t++)"widgetInput"===e.variables[t].name&&(s=t);s>-1?e.widgetInput=JSON.parse(e.variables[s].value||"{}"):e.widgetInput={};for(var r=-1,t=0;t<e.variables.length;t++)"pageName"===e.variables[t].name&&(r=t);r>-1?e.pageName=e.variables[r].value||"{}":e.pageName={},delete e.variables}),t.resolve(e)):t.resolve([])},function(e){var s="";switch(e.status){case 0:s="API SERVER is Not reachable!";break;default:s=e.description?e.description:"UNKNOW (from Activiti)"}console.error("ERROR S3BpmGetTaskListByUser","error data >> ",e.data),console.error("s3-activiti-middle description >> ",s,"error response >> ",e),t.reject(e)}),t.promise},S3BpmGetTaskListByProcessDefinitionKey:function(s,t){t||(t={}),t.processDefinitionKey=s,t.access_token=o.getAccessToken(),t.includeTaskLocalVariables=!0;var r=e.defer();return l.get(t,function(e){e&&e.size>0?(e.data.forEach(function(e){for(var s=-1,t=0;t<e.variables.length;t++)"widgetInput"===e.variables[t].name&&(s=t);s>-1?e.widgetInput=JSON.parse(e.variables[s].value||"{}"):e.widgetInput={};for(var r=-1,t=0;t<e.variables.length;t++)"pageName"===e.variables[t].name&&(r=t);r>-1?e.pageName=e.variables[r].value||"{}":e.pageName={},delete e.variables}),r.resolve(e)):r.resolve([])},function(e){var s="";switch(e.status){case 0:s="API SERVER is Not reachable!";break;default:s=e.description?e.description:"UNKNOW (from Activiti)"}console.error("ERROR S3BpmGetTaskListByProcessDefinitionKey","error data >> ",e.data),console.error("s3-activiti-middle description >> ",s,"error response >> ",e),r.reject(e)}),r.promise},S3BpmGetTaskByTaskIdAndUser:function(s){var t={id:s,access_token:o.getAccessToken()},r=e.defer();return l.get(t,function(e){console.log("TaskService GET Task By Id And User Success!!"),r.resolve(e)},function(e){console.error("TaskService GET Task By Id And User Error...",e),r.reject(e)}),r.promise},S3BpmGetWidgetInputByTaskId:function(s){var t={id:s,variableName:"widgetInput",access_token:o.getAccessToken()},r=e.defer();return l.getVariablesFromTask(t,function(e){console.log("TaskService S3BpmGetWidgetInputByTaskId Success!!"),r.resolve(e)},function(e){console.error("TaskService S3BpmGetWidgetInputByTaskId Error...",e),r.reject(e)}),r.promise},S3BpmGetProcessDefinitionsByProjectId:function(t){var r=e.defer();return s({method:"GET",url:o.apiBaseUrl+"query/processDefinitionsByProjectId/"+t}).then(function(e){r.resolve(e)},function(e){r.reject(e)}),r.promise}}}])}(window,window.angular),function(e,s,t){"use strict";s.module("s3").directive("s3GetWebBaseUrl",["s3Config","s3BpmService",function(e,s){return{restrict:"AE",link:function(s,t,r){t.bind("click",function(){console.log(e.getWebBaseUrl())})},controller:function(e,s,t){}}}]).directive("s3CreateBpmProcess",["$state","s3Config","s3BpmService",function(e,s,t){return{restrict:"AE",scope:{bpmParameters:"=pdata",needAccessToken:"=needAccessToken",success:"=successHandler",error:"=errorHandler"},link:function(e,s,t){s.bind("click",function(){var s=t.s3CreateBpmProcess;null==e.bpmParameters&&(e.bpmParameters={}),e.needAccessToken===!0,e.create(s)})},controller:"s3CreateBpmProcessCtrl"}}]).controller("s3CreateBpmProcessCtrl",["$scope","s3BpmService",function(e,s){e.create=function(t){s.S3BpmCreate(t,e.bpmParameters,e.success,e.error,e.needAccessToken)}}]).directive("avaliableProcess",function(){return{restrict:"E",templateUrl:"s3/template/avaliableProcessTemplate.html",controller:"avaliableProcessCtrl"}}).controller("avaliableProcessCtrl",["$scope","s3BpmService","s3Config",function(e,s,t){e.processList=[],s.S3BpmGetProcessDefinitionsByProjectId(t.projectId).then(function(s){e.processList=s.data?s.data:s},function(e){})}]).controller("s3SchemaFormController",["$scope","s3BpmService","$q","$stateParams","$state","s3Config",function(e,t,r,a,o,i){function n(e,t,r){if("object"===e.type&&"file"===e.format){var a={};a.key=t,a.type="file",r.push(a)}else if("object"===e.type)if(s.isString(t)){var o=t.split("."),i={};i.key=o[o.length-1].split("[")[0],i.items=[],s.forEach(e.properties,function(e,s){n(e,t+"."+s,i.items)}),r.push(i)}else s.forEach(e.properties,function(e,s){n(e,s,r)});else"array"===e.type?n(e.items,t+"[]",r):"]"===t.substr(t.length-1)?r.push(t.split("[")[0]):r.push(t)}var c,l=function(e,s){for(var t=!1,r=0;r<s.length;r++)e===s[r]&&(t=!0);return t};e.submitData=function(s){e.onSubmit(s)};var u=s.isDefined(e.jsfReadonly)?e.jsfReadonly:[];e.jsfSchemaModels=[],e.jsfDataModels={};var d=[];s.forEach(e.jsfSchema,function(c,p){var f={},m=r.defer();JsonRefs.resolveRefs(c.schema,function(e,s){if(e)throw e;f.schema=s,m.resolve(f)});var v=m.promise;d.push(v),v.then(function(r){if(r.title=c.title,!s.isUndefined(e.jsfModel)&&e.jsfModel.hasOwnProperty(p)?(r.model=e.jsfModel[p],e.jsfDataModels[p]=e.jsfModel[p]):(r.model={},e.jsfDataModels[p]={}),!s.isUndefined(e.jsfForm)&&e.jsfForm.hasOwnProperty(p))r.form=e.jsfForm[p];else{var d=[];n(r.schema,null,d),s.isUndefined(e.onSubmit)||d.push({type:"button",style:"btn-info",icon:"glyphicon glyphicon-ok",title:" Submit",htmlClass:"text-center",onClick:function(){e.taskList=[],e.taskId="";var s,r,n,c,l=i.getProjectId();t.S3BpmGetProcessDefinitionsByProjectId(l).then(function(i){var l=function(e){console.log(e),o.go("common.main")};s=i.data[1],t.S3BpmGetTaskListByProcessDefinitionKey(s,a).then(function(s){e.taskId=s.data[0].id,e.processInstanceId=s.data[0].processInstanceId,e.onSubmit(e.jsfSchemaModels);for(p in e.jsfSchemaModels[0].schema.definitions)r=p;c=JSON.stringify(e.jsfSchemaModels[0].model),n='{"'+r+'":'+c+"}",n=JSON.parse(n);var a={action:"complete",variables:n};t.S3BpmExecute(e.processInstanceId,e.taskId,a,null,l)})});console.log(a),e.onSubmit(e.jsfSchemaModels)}}),r.form=d}l(p,u)?r.option={formDefaults:{readonly:!0}}:r.option={},e.jsfSchemaModels.push(r)})}),r.all(d).then(function(t){c=s.copy(e.jsfDataModels)})}]).directive("s3SchemaForm",function(){return{scope:{jsfData:"=",jsfSchema:"=",jsfForm:"=",jsfModel:"=",jsfTitle:"@",jsfReadonly:"=",onSubmit:"=",panelStyle:"@"},restrict:"E",templateUrl:"s3/template/s3SchemaFormTemplate.html",controller:"s3SchemaFormController"}})}(window,window.angular),angular.module("s3").run(["$templateCache",function(e){e.put("s3/template/avaliableProcessTemplate.html",'<h2>Avaliable Process</h2>\r\n<ul ng-repeat="process in processList">\r\n    <li><a s3-create-bpm-process="{{process.processDefinitionId}}" user-token="true" pdata="{}">{{process.processDefinitionId}}</a></li>\r\n</ul>'),e.put("s3/template/s3SchemaFormTemplate.html",'<div class="panel" ng-class="panelStyle || \'panel-default\'">\r\n  <div class="panel-heading" ng-if="jsfTitle">\r\n    <h3 class="panel-title">{{jsfTitle}}</h3>\r\n  </div>\r\n  <div class="panel-body">\r\n    <div class="panel panel-info" ng-repeat="jsfSchemaModel in jsfSchemaModels">\r\n      <div class="panel-heading" ng-if="jsfSchemaModel.title">\r\n        <h3 class="panel-title">{{jsfSchemaModel.title}}</h3>\r\n      </div>\r\n      <div class="panel-body">\r\n        <form sf-schema="jsfSchemaModel.schema" sf-form="jsfSchemaModel.form" sf-model="jsfSchemaModel.model" sf-options="jsfSchemaModel.option" ng-submit="submitData(jsfDataModels)"></form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n')}]),function(e,s){var t=s.module("ActivitiRest",["ngResource","s3"]);t.factory("ProcessInstanceService",["$resource","s3Config",function(e,s){function t(){return e(s.apiBaseUrl+"runtime/process-instances/:id",{id:"@id"},{getDiagram:{method:"GET",url:s.apiBaseUrl+"runtime/process-instances/:id/diagram"},query:{method:"POST",url:s.apiBaseUrl+"query/process-instances"}})}return new t}]).factory("TaskService",["$resource","s3Config",function(e,s){function t(){return e(s.apiBaseUrl+"runtime/tasks/:id",{id:"@id"},{query:{method:"POST",url:s.apiBaseUrl+"query/tasks"},execute:{method:"post",url:s.apiBaseUrl+"runtime/tasks/:id"},getVariablesForATask:{method:"GET",url:s.apiBaseUrl+"runtime/tasks/:id/variables"},getVariablesFromTask:{method:"GET",param:{variableName:"@variableName"},url:s.apiBaseUrl+"runtime/tasks/:id/variables/:variableName"},getBinaryDataForVariable:{method:"GET",param:{variableName:"@variableName"},url:s.apiBaseUrl+"runtime/tasks/:id/variables/:variableName/data"},createVariableOnTask:{method:"POST",url:s.apiBaseUrl+"runtime/tasks/:id/variables"}})}return new t}]).factory("HistoryService",["$resource","s3Config",function(e,s){function t(){return e(s.apiBaseUrl+"history/historic-process-instances/:processInstanceId",{processInstanceId:"@processInstanceId"},{query:{method:"POST",url:s.apiBaseUrl+"query/historic-process-instances/"},getBinaryDataForHistoric:{method:"GET",param:{variableName:"@variableName"},url:s.apiBaseUrl+"history/historic-process-instances/:processInstanceId/variables/:variableName/data"},getHistoricTask:{method:"GET",url:s.apiBaseUrl+"history/historic-task-instances"},getSingleHistoricTask:{method:"GET",param:{taskId:"@taskId"},url:s.apiBaseUrl+"history/historic-task-instances/:taskId"},queryHistoricTask:{method:"POST",url:s.apiBaseUrl+"query/historic-task-instances/"},deleteHistoricTask:{method:"DELETE",param:{taskId:"@taskId"},url:s.apiBaseUrl+"history/historic-task-instances/:taskId"}})}return new t}])}(window,window.angular),angular.module("s3").run(["$templateCache",function(e){e.put("s3/template/avaliableProcessTemplate.html",'<h2>Avaliable Process</h2><ul ng-repeat="processId in processList"><li><a s3-create-bpm-process="{{processId}}" user-token="true" pdata="{}">{{processId}}</a></li></ul>')}]);